from Lib.BotDB_Func import BotDB_Func
from Lib.keyboards import *
from config import db_path, data_folder

db = BotDB_Func(db_path=db_path)

class Pages:
    def __init__(self, sender):
        self.s = sender

    def start_page(self):
        pass


    def home_page(self, id: int, null:bool|None=None):
        db.change_stage(user_id=id, stage=100)
        if null is not None:
            db.null_user(user_id=id)
        stage = 100
        subgroup = db.get_subgroup(user_id=id)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ: "
        keyboard = stage_home_keyboard(stage=stage, subgroup=subgroup)
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def other_page(self, id: int):
        db.change_stage(user_id=id, stage=101)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ: '
        can_get_teachers = False
        if 'teachers' in db.get_passwords(user_id=id):
            can_get_teachers = True
        keyboard = stage_other_keyboard(can_get_teachers=can_get_teachers)
        self.s.sender(id=id, text=text, keyboard=keyboard)
        

    def passwords_page(self, id: int, event):
        db.change_stage(user_id=id, stage=102)
        if 'callback' in event.button_actions:
            text = '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–¥-–ø–∞—Ä–æ–ª—å?'
            settings = dict(inline=True)
            inline_keyboard = VkKeyboard(**settings)
            inline_keyboard.add_callback_button(
                    label='–£–∑–Ω–∞—Ç—å', 
                    color=VkKeyboardColor.POSITIVE, 
                    payload={'type': 'what_is_password'}
                    )
            self.s.sender(id=id, text=text, inline_keyboard=inline_keyboard)
        else:
            text = 'üîµ–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –¥–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ '\
                    '("–ü–∞—Ä–æ–ª–∏"), –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–º '\
                    '–∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º. (–í–≤–æ–¥–∏—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n' \
                    '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É –í–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '\
                    '–≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–∞—Ä–æ–ª—è:\n'\
                    '‚û°–û—Ç–∫—Ä—ã—Ç–∞—è -> –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–≥—É—Ç –≤—Å–µ '\
                    '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å\n'\
                    '‚û°–ü—Ä–∏–≤–∞—Ç–Ω–∞—è -> –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ '\
                    '—Å–æ–∑–¥–∞—Ç–µ–ª—å –ø–∞—Ä–æ–ª—è\n\n'\
                    'üîµ–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –¥–∞–Ω–Ω–æ–π '\
                    '–≤–∫–ª–∞–¥–∫–µ ("–ü–∞—Ä–æ–ª–∏"), –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ: '\
                    '"del –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ"\n'\
                    '–ü—Ä–∏–º–µ—Ä: del 123\n(—É –≤–∞—Å —É–¥–∞–ª–∏—Ç—Å—è –ø–∞—Ä–æ–ª—å 123)\n\n'\
                    'üîµ–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–∞—Ä–æ–ª–µ–π –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '\
                    '–∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–∞—Ä–æ–ª–∏". \n\n' \
                    '‚ùï–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º,—É –∫–æ–≥–æ –≤–≤–µ–¥—ë–Ω '\
                    '—Ç–∞–∫–æ–π –∂–µ –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É '\
                    '–±–æ—Ç–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ "–ø–∞—Ä–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ".\n' \
                    '–ü—Ä–∏–º–µ—Ä: 123 –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n' \
                    '(–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º '\
                    '123 –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!" )'
            self.s.sender(id=id, text=text)
        text = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:'
        keyboard = stage_passwords_keyboard()
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def setting_password_page(self, id: int):
        text = f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n'\
                '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è -> –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ '\
                '—Å–æ–∑–¥–∞—Ç–µ–ª—å\n'\
                '–û—Ç–∫—Ä—ã—Ç–∞—è -> –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–≥—É—Ç –≤—Å–µ '\
                '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å'
        db.change_stage(user_id=id, stage=103)
        keyboard = stage_setting_passwords_keyboard()
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def mail_page(self, id: int):
        db.change_stage(user_id=id, stage=104)
        daily_mail = db.get_daily_mail(user_id=id)
        weekly_mail = db.get_weekly_mail(user_id=id)
        text = '–í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:'
        keyboard = stage_mail_keyboard(
                daily_mail=daily_mail, 
                weekly_mail=weekly_mail
                )
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def form_page(self, id: int, update_forms: bool|None = None):
        if update_forms is None:
            db.change_stage(user_id=id, stage=1)
            db.null_schedule(user_id=id)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è:"
        keyboard = stage_form_keyboard(data_folder=data_folder)
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def fac_page(self, id: int, msg: str):
        forms = get_forms(data_folder=data_folder)
        for form in forms:
            if form.lower() == msg:
                db.change_stage(user_id=id, stage=2)
                db.change_form(user_id=id, form=form)
                text = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:'
                keyboard = stage_fac_keyboard(
                        data_folder=data_folder, 
                        form=form
                        )
                self.s.sender(id=id, text=text, keyboard=keyboard)

    def group_select_page(self, id: int, msg: None|str = None, 
            update_stage: bool|None = None):
        fac = ''
        if msg is not None:
            form = db.get_form(user_id=id)
            group_page = db.get_group_page(user_id=id)
            facs = get_facs(data_folder=data_folder, form=form)
            for fac in facs:
                if fac.lower() == msg:
                    db.change_fac(user_id=id, fac=fac)
                    db.change_stage(user_id=id, stage=3)
                    break
        else:
            if update_stage is not None:
                db.change_stage(user_id=id, stage=3)
            db.del_group(user_id=id)
            db.del_subgroup(user_id=id)
            form = db.get_form(user_id=id)
            fac = db.get_fac(user_id=id)
            group_page = db.get_group_page(user_id=id)
        text = f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≥—Ä—É–ø–ø:\n–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {group_page}'
        keyboard = stage_group_keyboard(
                data_folder=data_folder, 
                form=form, 
                fac=fac, 
                group_page=group_page
                )
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def session_group_select_page(self, id: int, update_stage:bool|None = None):
        if update_stage is not None:
            db.change_stage(user_id=id, stage=3.5)
        form = db.get_form(user_id=id)
        fac = db.get_fac(user_id=id)
        session_group_page = db.get_session_group_page(user_id=id)
        text = f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≥—Ä—É–ø–ø:\n–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {session_group_page}'
        keyboard = stage_session_group_keyboard(
                data_folder=data_folder, 
                form=form, 
                fac=fac, 
                session_group_page=session_group_page
                )
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def subgroup_page(self, id: int, session:None|bool=None, msg:None|str=None):
        group = ''
        if msg is not None:
            form = db.get_form(user_id=id)
            fac = db.get_fac(user_id=id)
            if session == True:
                groups = get_session_groups(data_folder=data_folder, form=form, fac=fac)
            else:
                groups = get_groups(data_folder=data_folder, form=form, fac=fac)
            for group in groups:
                if group.lower() == msg:
                    db.change_stage(user_id=id, stage=4)
                    db.change_group(user_id=id, group=group)
                    break
        else:
            db.change_stage(user_id=id, stage=4)
            db.del_subgroup(user_id=id)
            form = db.get_form(user_id=id)
            fac = db.get_fac(user_id=id)
            group = db.get_group(user_id=id)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:'
        keyboard = stage_subgroup_keyboard(
                data_folder=data_folder, 
                form=form, 
                fac=fac, 
                group=group
                )
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def schedule_type_page(self, id: int, msg: str|None = None):
        if msg is not None:
            form = db.get_form(user_id=id)
            fac = db.get_fac(user_id=id)
            group = db.get_group(user_id=id)
            all_subgroups = get_subgroups(
                    data_folder=data_folder, 
                    form=form, 
                    fac=fac, 
                    group=group
                    )
            for subgroup in range(1, all_subgroups + 1):
                if str(subgroup).lower() == msg:
                    db.change_subgroup(user_id=id, subgroup=str(subgroup))
        db.change_stage(user_id=id, stage=5)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ: '
        keyboard = stage_schedule_type_keyboard()
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def date_select_page(self, id: int, update:bool|None=None):
        db.change_stage(user_id=id, stage=6)
        form = db.get_form(user_id=id)
        fac = db.get_fac(user_id=id)
        group = db.get_group(user_id=id)
        date_page = db.get_date_page(user_id=id)
        if update is not None:
            text = '–î–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        else:
            text = f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:\n–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {date_page}'
        keyboard = stage_date_keyboard(
                data_folder=data_folder, 
                form=form, 
                fac=fac, 
                group=group, 
                date_page=date_page
                )
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def week_select_page(self, id: int):
        db.change_stage(user_id=id, stage=7)
        week_page = db.get_week_page(user_id=id)
        form = db.get_form(user_id=id)
        fac = db.get_fac(user_id=id)
        group = db.get_group(user_id=id)
        subgroup = db.get_subgroup(user_id=id)
        quality = db.get_quality(user_id=id)
        mode = db.get_mode(user_id=id)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:'
        keyboard = stage_week_keyboard(
                data_folder=data_folder, 
                week_page=week_page, 
                form=form, 
                fac=fac, 
                group=group, 
                subgroup=subgroup, 
                quality=quality, 
                mode=mode
                )
        self.s.sender(id=id, text=text, keyboard=keyboard)


    def settings_week_page(self, id: int):
        db.change_stage(user_id=id, stage=8)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ:'
        mode = db.get_mode(user_id=id)
        quality = db.get_quality(user_id=id)
        keyboard = stage_settings_week_keyboard(mode=mode, quality=quality)
        self.s.sender(id=id, text=text, keyboard=keyboard)
